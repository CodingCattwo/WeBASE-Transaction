/*
 * Copyright 2014-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package com.webank.webase.transaction.repository.mapper;

import com.webank.webase.transaction.frontinterface.entity.MapListParam;
import com.webank.webase.transaction.repository.bean.TbFrontGroupMap;
import org.apache.ibatis.jdbc.SQL;

public class TbFrontGroupMapSqlProvider {

    public String countByParam(MapListParam param) {
        SQL sql = new SQL();
        sql.SELECT("count(1)").FROM("tb_front_group_map");
        this.applyContractParam(sql, param);
        return sql.toString();
    }

    public SQL applyContractParam(SQL sql, MapListParam param) {
        if (param.getMapId() != null) {
            sql.WHERE("map_id = #{mapId}");
        }
        if (param.getFrontId() != null) {
            sql.WHERE("front_id = #{frontId}");
        }
        if (param.getGroupId() != null) {
            sql.WHERE("group_id = #{groupId}");
        }
        if (param.getChainId() != null) {
            sql.WHERE("chain_id = #{chainId}");
        }
        return sql;
    }

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table tb_front_group_map
     *
     * @mbg.generated
     */
    public static final String ALL_COLUMN_FIELDS = "map_id,chain_id,front_id,group_id,create_time,modify_time,front_status";

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front_group_map
     *
     * @mbg.generated
     */
    public String insertSelective(TbFrontGroupMap record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("tb_front_group_map");
        if (record.getChainId() != null) {
            sql.VALUES("chain_id", "#{chainId,jdbcType=INTEGER}");
        }
        if (record.getFrontId() != null) {
            sql.VALUES("front_id", "#{frontId,jdbcType=INTEGER}");
        }
        if (record.getGroupId() != null) {
            sql.VALUES("group_id", "#{groupId,jdbcType=INTEGER}");
        }
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        if (record.getModifyTime() != null) {
            sql.VALUES("modify_time", "#{modifyTime,jdbcType=TIMESTAMP}");
        }
        if (record.getFrontStatus() != null) {
            sql.VALUES("front_status", "#{frontStatus,jdbcType=TINYINT}");
        }
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front_group_map
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(TbFrontGroupMap record) {
        SQL sql = new SQL();
        sql.UPDATE("tb_front_group_map");
        if (record.getChainId() != null) {
            sql.SET("chain_id = #{chainId,jdbcType=INTEGER}");
        }
        if (record.getFrontId() != null) {
            sql.SET("front_id = #{frontId,jdbcType=INTEGER}");
        }
        if (record.getGroupId() != null) {
            sql.SET("group_id = #{groupId,jdbcType=INTEGER}");
        }
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        if (record.getModifyTime() != null) {
            sql.SET("modify_time = #{modifyTime,jdbcType=TIMESTAMP}");
        }
        if (record.getFrontStatus() != null) {
            sql.SET("front_status = #{frontStatus,jdbcType=TINYINT}");
        }
        sql.WHERE("map_id = #{mapId,jdbcType=INTEGER}");
        return sql.toString();
    }
}
